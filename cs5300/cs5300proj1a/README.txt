Project 1a
NetId - pm489


High Level Class Description 

a) Session Manager - This is the main servlet class which extends HttpServlet handles all HTTP requests.

b) CleanUpDaemon - This is the daemon which is scheduled periodically. It iterates over the complete session table and removes any session object which is past its expiration date. This class inherits the timertask class.

c) CleanUpDaemonInitializer - This is the class which gets executed when the server comes up and it schedules the CleanUpDaemon periodically.

d) SessionTable and ConcurrentHashMapSessionTable -  SessionTable is the interface for the session table data structure that we need for storing the mapping from session id to session object. ConcurrentHashMapSessionTable is the implementation of sessiontable interface which uses a concurrenthashmap to maintain this mapping. This would allow us to change the underlying implementation of session table later without changing the sessionmanager class.

e) SessionObject - This object represents a session. This contains the session id, version numer, expiration time and the message.



GENERATING SESSION ID AND SESSION TABLE

A unique session id is generated by generating a UUID by java.rmi.server.UID() class which is unique on the host on which is generated and appending the IP address of the host to make it unique across hosts. 

The session id to session object mapping is currently maintained using a concurrent hash map which ensures lock free reads and will handle contention in case of conflicting writes. In ensures every read has the lastest updated copy of the session.


COOKIE Format

The cookie has a key value mapping where the key is CS5300PROJ1SESSIONPM489 and the value is the sessionID.


VERSION NUMBER

The version number is maintained as part of the session object and is incremented with ever server interaction for that session. The version number is also displayed on the web page. The version number **is not** part of the session id, but rather the version number is incremented in the session object every time.


SERVLET BEHAVIOR

There is only one servlet class and the actions are differentiated by passing a parameter from the client to the server. 

    1) Initial Page Load -  In this case the cookie is absent and the server creates a new session for the user. There is a server call before the page is loaded and the corresponding values of expiration time, version number and message is displayed on the UI

    2) Page refresh - In this case the cookie contains a session id. The expiration time is reset in the cookie and in the session object and the version number is incremented.

    3) Replace - In this case the new message is passed to the server and is replaced in the session object. The expiration time is reset and the version number is incremented too. In case the cookie does not have a valid session id which is possible when someone clicks on the replace button after a log out, a new sesssion is created. The replace message is truncated to 30 character to make sure that the session state is limited to 512 bytes.

    4) Refresh - In this case the expiration time is reset and the version number is incremented. If the cookie does not contain a session id or the session has expired, a new session is created.

    5) Logout - In this case the session entry is removed from the session table. The max age of the cookie is set to be zero so that the browser would throw away from cookie.


CLEANING UP EXPIRED SESSIONS

CleanUpDaemon is responsible to make sure that old expired sessions are removed from the session table so that the size of the session table does not become very large. Also the max age in cookie is also changed so that the browser throws aways the old cookies. The daemon is executed periodically using a timer which is run in another class.
